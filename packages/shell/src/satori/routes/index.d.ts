import type { Route } from './types';
declare const routesIntl: {
    readonly 'channel.get': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<import("../types").Channel>;
    readonly 'channel.list': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<import("../types").ChannelListResponse>;
    readonly 'channel.create': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'channel.update': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'channel.delete': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'unsafe.channel.mute': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<Record<string, never>>;
    readonly 'unsafe.channel.member.mute': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<Record<string, never>>;
    readonly 'user.channel.create': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<import("../types").Channel>;
    readonly 'guild.get': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<import("../types").Guild>;
    readonly 'guild.list': ({ cctx }: import("./types").RouteContext) => Promise<import("../types").GuildListResponse>;
    readonly 'guild.approve': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<Record<string, never>>;
    readonly 'unsafe.guild.remove': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<Record<string, never>>;
    readonly 'guild.member.get': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<import("../types").GuildMember>;
    readonly 'guild.member.list': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<import("../types").GuildMemberListResponse>;
    readonly 'guild.member.kick': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<Record<string, never>>;
    readonly 'guild.member.approve': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'guild.member.role.set': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'guild.member.role.unset': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'guild.role.list': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'guild.role.create': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'guild.role.update': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'guild.role.delete': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'login.get': ({ cctx }: import("./types").RouteContext) => Promise<import("../types").Login>;
    readonly 'message.create': (rctx: import("./types").RouteContext) => Promise<void | import("../types").Message[]>;
    readonly 'message.get': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<import("../types").Message>;
    readonly 'message.delete': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<Record<string, never>>;
    readonly 'message.update': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'message.list': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<import("../types").MessageListResponse>;
    readonly 'reaction.create': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'reaction.delete': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'reaction.clear': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'reaction.list': ({ cctx, path, req, res, }: import("./types").RouteContext) => Promise<void>;
    readonly 'user.get': ({ cctx, path, req, res, json }: import("./types").RouteContext) => Promise<import("../types").User>;
    readonly 'friend.list': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<import("../types").FriendListResponse>;
    readonly 'friend.approve': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<Record<string, never>>;
    readonly 'unsafe.friend.remove': ({ cctx, path, req, res, json, }: import("./types").RouteContext) => Promise<Record<string, never>>;
};
export type Routes = keyof typeof routesIntl;
export declare const routes: Record<Routes, Route>;
export {};
